name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose environment
        run: |
          cd ${{ github.workspace }}/docker
          cp .env.example .env
          # For CI/CD, generate a placeholder APP_KEY if it's still the default.
          # In local development, the entrypoint script handles this.
          sed -i 's|APP_KEY=YOUR_GENERATED_APP_KEY_HERE|APP_KEY=base64:ci_cd_placeholder_app_key_for_testing_only_this_is_not_secure=|g' .env
          
          # Pass required environment variables for health checks
          echo "DB_USERNAME=user" >> .env
          echo "DB_PASSWORD=password" >> .env # Using default for CI, warn user about production
          echo "APP_URL=http://ad-api.localhost" >> .env
          echo "SANCTUM_STATEFUL_DOMAINS=localhost,ad-api.localhost,frontend.localhost" >> .env
          echo "KAFKA_BROKER=kafka1:9092" >> .env # Use one broker for CI health check
          echo "REDIS_HOST=redis" >> .env
          echo "TRAEFIK_API_KEY=your_secure_traefik_api_key_here" >> .env # Use the same key as in .env.example

      - name: Build and run Docker containers
        run: |
          cd ${{ github.workspace }}/docker
          # Use --remove-orphans to clean up old services if compose file changed
          docker-compose -f docker-compose.yml up --build -d --force-recreate

      - name: Wait for core services to be healthy
        env:
          DB_USERNAME: user
          DB_PASSWORD: password
        run: |
          cd ${{ github.workspace }}/docker
          echo "Waiting for Zookeeper cluster to be healthy (Zookeeper1)..."
          timeout 240 bash -c 'until docker-compose exec zookeeper1 sh -c "echo ruok | nc localhost 2181"; do echo "Waiting for Zookeeper1..."; sleep 5; done'
          echo "Zookeeper1 is healthy."
          timeout 240 bash -c 'until docker-compose exec zookeeper2 sh -c "echo ruok | nc localhost 2181"; do echo "Waiting for Zookeeper2..."; sleep 5; done'
          echo "Zookeeper2 is healthy."
          timeout 240 bash -c 'until docker-compose exec zookeeper3 sh -c "echo ruok | nc localhost 2181"; do echo "Waiting for Zookeeper3..."; sleep 5; done'
          echo "Zookeeper3 is healthy."

          echo "Waiting for Kafka brokers to be healthy..."
          # Check if Kafka topic listing works, which implies Zookeeper registration and broker readiness
          timeout 300 bash -c 'until docker-compose exec kafka1 kafka-topics.sh --bootstrap-server localhost:9092 --list 2>/dev/null; do echo "Waiting for Kafka1..."; sleep 10; done'
          echo "Kafka1 is healthy."
          timeout 300 bash -c 'until docker-compose exec kafka2 kafka-topics.sh --bootstrap-server localhost:9092 --list 2>/dev/null; do echo "Waiting for Kafka2..."; sleep 10; done'
          echo "Kafka2 is healthy."
          timeout 300 bash -c 'until docker-compose exec kafka3 kafka-topics.sh --bootstrap-server localhost:9092 --list 2>/dev/null; do echo "Waiting for Kafka3..."; sleep 10; done'
          echo "Kafka3 is healthy."

          echo "Waiting for MySQL to be healthy..."
          timeout 240 bash -c 'until docker-compose exec db mysqladmin ping -h localhost -u${DB_USERNAME} -p${DB_PASSWORD}; do echo "Waiting for MySQL..."; sleep 5; done'
          echo "MySQL is healthy."
          
          echo "Waiting for Redis to be healthy..."
          timeout 240 bash -c 'until docker-compose exec redis redis-cli ping; do echo "Waiting for Redis..."; sleep 5; done'
          echo "Redis is healthy."

          echo "Waiting for Traefik to be healthy..."
          timeout 180 bash -c 'until curl --fail http://localhost:8080/ping; do echo "Waiting for Traefik..."; sleep 5; done'
          echo "Traefik is healthy."
          
          echo "Waiting for cAdvisor to be healthy..."
          timeout 120 bash -c 'until curl --fail http://localhost:8080/healthz; do echo "Waiting for cAdvisor..."; sleep 5; done'
          echo "cAdvisor is healthy."

      - name: Wait for application services to be healthy
        run: |
          cd ${{ github.workspace }}/docker
          echo "Waiting for Laravel (api/health) to be healthy..."
          timeout 240 bash -c 'until curl --fail http://localhost:8000/api/health; do echo "Waiting for Laravel..."; sleep 5; done'
          echo "Laravel is healthy."
          
          echo "Waiting for FastAPI (health) to be healthy..."
          timeout 240 bash -c 'until curl --fail http://localhost:8001/health; do echo "Waiting for FastAPI..."; sleep 5; done'
          echo "FastAPI is healthy."

          echo "Waiting for Frontend to be healthy..."
          timeout 240 bash -c 'until curl --fail http://localhost:80; do echo "Waiting for Frontend..."; sleep 5; done'
          echo "Frontend is healthy."
      
      - name: Run Laravel Migrations and Seeders
        run: |
          cd ${{ github.workspace }}/docker
          docker-compose exec laravel sh -c "php artisan migrate --force && php artisan db:seed --force"

      - name: Run Laravel Tests (PHPUnit)
        run: |
          cd ${{ github.workspace }}/docker
          docker-compose exec laravel sh -c "vendor/bin/phpunit"

      - name: Run FastAPI Tests (Pytest)
        run: |
          cd ${{ github.workspace }}/docker
          docker-compose exec fastapi sh -c "pip install pytest && pytest"
      
      - name: Run Frontend Tests (React Scripts)
        run: |
          cd ${{ github.workspace }}/frontend
          npm test -- --passWithNoTests # Use this if you don't have tests yet, but want the step to pass

      - name: Cleanup
        if: always()
        run: |
          cd ${{ github.workspace }}/docker
          docker-compose -f docker-compose.yml down --volumes --rmi all
